{"version":3,"sources":["redux/actions.js","redux/reduser.js","redux/store.js","components/Section/Section.js","components/Form/Form.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["actions","addContact","createAction","contact","payload","id","shortid","generate","deleteContact","changeFilter","contacts","createReducer","name","number","state","filter","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","storage","blacklist","rootReducer","persistReducer","reducer","store","configureStore","devTools","process","persistor","persistStore","Section","title","children","className","Form","useState","setNeme","setNumber","useSelector","dispatch","useDispatch","handleChange","e","target","value","reset","onSubmit","preventDefault","find","alert","type","onChange","pattern","required","ContactList","getFilterList","createSelector","normalizedFilter","toLowerCase","includes","list","map","onClick","Filter","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.7e0418ce.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n\r\nconst addContact = createAction('add', (contact) => ({\r\n  payload: {\r\n    contact: {\r\n      id: shortid.generate(),\r\n      ...contact,\r\n    }\r\n  }\r\n}));\r\n\r\nconst deleteContact = createAction('delete');\r\n\r\nconst changeFilter = createAction('changeFilter');\r\n\r\nconst actions = {\r\n  addContact,\r\n  deleteContact,\r\n  changeFilter,\r\n};\r\n\r\nexport default actions;","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from './actions';\r\n\r\nconst initialContact = [\r\n  { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n  { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n  { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n  { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n];\r\n\r\nconst contacts = createReducer(initialContact, {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload.contact],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n});","import { configureStore, combineReducers, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport logger from \"redux-logger\";\r\nimport reducer from \"./reduser\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER\r\n} from \"redux-persist\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger\r\n];\r\n\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: persistReducer(persistConfig, reducer)\r\n});\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport const persistor = persistStore(store);","import propTypes from \"prop-types\";\r\nimport './Section.css'\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      <h2 className=\"title\">{title}</h2>\r\n      {children}\r\n    </section>\r\n  )\r\n}\r\n\r\nSection.propTypes = {\r\n  title: propTypes.string,\r\n  children: propTypes.any,\r\n}\r\n","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport actions from '../../redux/actions';\r\nimport PropTypes from 'prop-types';\r\nimport './Form.css';\r\n\r\nexport default function Form() {\r\n    const [name, setNeme] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    const contacts = useSelector((state) => state.contacts.contacts);\r\n    const dispatch = useDispatch();\r\n  \r\n    const handleChange = (e) => {\r\n        switch (e.target.name) {\r\n            case 'name':\r\n                setNeme(e.target.value);\r\n                break;\r\n            case 'number':\r\n                setNumber(e.target.value);\r\n                break;\r\n            default: return;\r\n        }\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (contacts.find((contact) => contact.name === name)) {\r\n            alert(`${name} is already in contacts`);\r\n            return;\r\n        }\r\n        dispatch(actions.addContact({ name, number }));\r\n        reset();\r\n    }\r\n\r\n    const reset = () => {\r\n        setNeme('');\r\n        setNumber('');\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"form\">\r\n            <label className=\"label\">\r\n                Имя\r\n                <input\r\n                    className=\"input\"\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                />\r\n            </label>\r\n            \r\n            <label className=\"label\">\r\n                Телефона\r\n                <input\r\n                    className=\"input\"\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    value={number}\r\n                    onChange={handleChange}\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                />\r\n            </label>\r\n            \r\n            <button className=\"button\" type=\"submit\">Add contact</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nForm.propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.number,\r\n    handleChange: PropTypes.func,\r\n    handleSubmit: PropTypes.func\r\n}","import { useDispatch, useSelector } from 'react-redux';\r\nimport { createSelector } from '@reduxjs/toolkit';\r\nimport actions from '../../redux/actions';\r\nimport PropTypes from \"prop-types\";\r\nimport './ContactList.css';\r\n\r\nexport default function ContactList() {\r\n  const dispatch = useDispatch();\r\n  \r\n  const getContacts = (state) => state.contacts.contacts;\r\n  const getFilter = (state) => state.contacts.filter;\r\n\r\n  const getFilterList = createSelector(\r\n    [getContacts, getFilter],\r\n    (contacts, filter) => {\r\n      const normalizedFilter = filter.toLowerCase();\r\n      return contacts.filter((contact) => {\r\n        return contact.name.toLowerCase().includes(normalizedFilter)\r\n      })\r\n    }\r\n  );\r\n  \r\n  const list = useSelector(getFilterList);\r\n\r\n  return (\r\n    <ul className=\"list\">\r\n      {list.map(({ id, name, number }) => (\r\n        <li key={id}>\r\n          {name}: {number}\r\n          <button\r\n            className=\"button-list\"\r\n            type=\"button\"\r\n            onClick={() => dispatch(actions.deleteContact(id))}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\n\r\nContactList.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.number\r\n}","import actions from '../../redux/actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from \"prop-types\";\r\nimport './Filter.css';\r\n\r\nexport default function Filter() {\r\n  const value = useSelector((state) => state.contacts.filter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <label className=\"filter-label\">\r\n      Find contacts by name\r\n      <input\r\n        className=\"filter-input\"\r\n        value={value}\r\n        onChange={(e) => dispatch(actions.changeFilter(e.target.value))}\r\n        type=\"text\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n      />\r\n    </label>\r\n  )\r\n}\r\n\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func\r\n}","import Section from './components/Section/Section';\nimport Form from './components/Form/Form';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport './App.css';\n\nexport default function App() {\n  return (\n      <div className=\"conteiner\">\n        <Section title=\"Phonebook\">\n          <Form />\n        </Section>\n        <Section title=\"Contacts\">\n          <Filter/>\n          <ContactList/>\n        </Section>\n      </div>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from \"./redux/store\";\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}